@page "/graphictimetables"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject PrintedReportsService DataService

@if (!DataIsReady)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />
    <div class="no-print" style="font-size:18pt;">
        <InputSelect class="form-select update" @bind-Value="selectedTrainId">
            @foreach( var item in TrainItems.OrderBy(i=>i.TrainNumber))
            {
                <option style="font-size: 18pt" value="@item.Id">@item.TrainNumber</option>
            }
        </InputSelect>
        <InputNumber class="update" DisplayName="Minutes" @bind-Value="selectedMinutes"></InputNumber> 
        <button class="update" type="button" @onclick="Update">Update</button>
    </div>
    @if (TimetableStretches.Any(ts => ts.BreakHour.HasValue))
    {
        foreach (var timetableStretch in TimetableStretches)
        {
            <GraphicTimetableStretch Data="@timetableStretch" BreakPart="1" OnlyDays="@SelectedDays"></GraphicTimetableStretch>

        }
        foreach (var timetableStretch in TimetableStretches)
        {
            <GraphicTimetableStretch Data="@timetableStretch" BreakPart="2" OnlyDays="@SelectedDays"></GraphicTimetableStretch>

        }
    }
    else
    {
        foreach (var timetableStretch in TimetableStretches)
        {
            <GraphicTimetableStretch Data="@timetableStretch" OnlyDays="@SelectedDays"></GraphicTimetableStretch>

        }
    }

}

@code {
    private TimetableStretch[] TimetableStretches = Array.Empty<TimetableStretch>();
    private IEnumerable<ListboxItem> TrainItems = [];
    private bool DataIsReady = false;
    private string? SelectedStretch;
    private string? SelectedDays;
    private int selectedTrainId;
    private int selectedMinutes;
    private Layout? Layout;

    protected async override Task OnInitializedAsync()
    {
        DataIsReady = false;
        var layoutResult = await DataService.GetLayoutAsync();
        if (layoutResult.statusCode.IsSuccess())
        {
            Layout = layoutResult.item;
            SetQueryStringParameters();
            var result = await DataService.GetTimetableStretchesAsync(Layout!.Id, SelectedStretch);
            if (result.statusCode.IsSuccess())
            {
                TimetableStretches = result.items.ToArray();
                TrainItems = GetTrainItems(result.items);
            }
            DataIsReady = true;
        }
    }

    private IEnumerable<ListboxItem> GetTrainItems(IEnumerable<TimetableStretch> stretches)
    {
        var result = new List<ListboxItem>(100);
        foreach(var stretch in stretches)
        {
            foreach(var train in stretch.TrainSections)
            {
                if (train.TrainId > 0 && !result.Any(r => r.Id == train.TrainId))
                {
                    result.Add(new(train.TrainId, train.TrainLabel()));
                }
            }
        }
        return result;
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedStretch = q["line"];
        SelectedDays = q["days"];
    }

    async Task Update()
    {
        if (selectedMinutes != 0)
        {
            var result = await DataService.UpdateTrainAndGetTimetableStretchesAsync(Layout!.Id, selectedTrainId, selectedMinutes, SelectedStretch);
            if (result.statusCode.IsSuccess())
            {
                TimetableStretches = result.items.ToArray();
                TrainItems = GetTrainItems(result.items);
            }
        }
    }
}
