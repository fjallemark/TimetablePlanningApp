@page "/locoschedules"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService


@if (Locos == null)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />

    @foreach (var itemsOnPage in SortedLocos.ItemsPerPage(10))
    {
        <div class="pagebreak">
            @foreach (var item in itemsOnPage)
            {
                if (item is LocoSchedule loco)
                {
                    <VehicleScheduleCard Item="loco" />
                }
                else if (item is ShuntingLoco shunter && Layout?.PrintShuntingLocos == true)
                {
                    <ShunterLocoCard Item="shunter" />
                }
            }
        </div>
    }
}

@code {
    private List<Vehicle>? Locos { get; set; }
    private Layout? Layout;
    string? SelectedOperatorNames { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Locos = new(50);
        var layoutResult = await DataService.GetLayoutAsync();
        if (layoutResult.statusCode.IsSuccess())
        {
            SetQueryStringParameters();
            Layout = layoutResult.item;
            var locoSchedules = await DataService.GetLocoSchedulesAsync(Layout!.Id);
            if (locoSchedules.statusCode.IsSuccess())
            {
                var items = locoSchedules.items.Where(i => i.ReplaceOrder == 0);
                var filtered = SelectedOperatorNames.HasValue() ? items.Where(i => i.OperatorName.EqualsAny(SelectedOperatorNames)) : items;
                Locos.AddRange(filtered.Cast<Vehicle>());
            }
            var shunters = await DataService.GetShuntingLocosAsync(Layout.Id);
            if (shunters.statusCode.IsSuccess())
            {
                var filtered = SelectedOperatorNames.HasValue() ? shunters.items.Where(i => i.OperatorName.EqualsAny(SelectedOperatorNames)) : shunters.items;
                Locos.AddRange(filtered.Cast<Vehicle>());
            }

        }
    }

    IEnumerable<Vehicle> SortedLocos =>
        Locos is null ? [] :
        Locos
        .OrderBy(l => l.OperatorName)
        .ThenBy(l => l.TurnusNumber)
        .ThenBy(l => l.OperationDaysFlags.FirstOperationDay().Flags)
        .ToList();

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperatorNames = q["operator"];
    }
}
