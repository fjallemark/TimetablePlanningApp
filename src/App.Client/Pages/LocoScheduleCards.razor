@page "/locoschedules"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService
@inject IOptions<AppSettings> Options


@if (Locos == null || Shunters is null)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />

     @foreach (var itemsOnPage in Locos.ItemsPerPage(10))
    {
        <div class="pagebreak">
            @foreach (var loco in itemsOnPage)
            {
                <VehicleScheduleCard Item="loco"/>
            }
        </div>
    }
    @foreach (var itemsOnPage in Shunters.ItemsPerPage(10))
    {
        <div class="pagebreak">
            @foreach(var shunter in itemsOnPage)
            {
                <ShunterLocoCard Item="shunter"/>
            }
        </div>
    }
}

@code {
    private IEnumerable<LocoSchedule>? Locos { get; set; }
    private IEnumerable<ShuntingLoco>? Shunters { get; set; }
    string? Operators { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var settings = Options.Value;
        Locos = null;
        Shunters = null;
        var locos = await DataService.GetLocoSchedulesAsync(settings.LayoutId);
        if (locos.statusCode.IsSuccess())
        {
            var items = locos.items.Where(i => i.ReplaceOrder == 0);
            SetQueryStringParameters();
            Locos = Operators.HasValue() ? locos.items.Where(i => i.Operator.EqualsAny(Operators)) : locos.items;
        }
        var shunters = await DataService.GetShuntingLocosAsync(settings.LayoutId);
        if (shunters.statusCode.IsSuccess())
        {
            Shunters = Operators.HasValue() ? shunters.items.Where(i => i.Operator.EqualsAny(Operators)) : shunters.items;
        }
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        Operators = q["operator"];
    }
}
