@page "/locoschedules"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService
@inject IOptions<AppSettings> Options


@if (Locos == null)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />

    @foreach (var itemsOnPage in Locos.ItemsPerPage(10))
    {
        <div class="pagebreak">
            @foreach (var item in itemsOnPage)
            {
                if (item is LocoSchedule loco)
                {
                    <VehicleScheduleCard Item="loco" />
                }
                else if (item is ShuntingLoco shunter)
                {
                    <ShunterLocoCard Item="shunter" />
                }
            }
        </div>
    }
}

@code {
    private List<Vehicle>? Locos { get; set; } 
    string? Operators { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Locos = new(50);
        var settings = Options.Value;
        SetQueryStringParameters();
        var locoSchedules = await DataService.GetLocoSchedulesAsync(settings.LayoutId);
        if (locoSchedules.statusCode.IsSuccess())
        {
            var items = locoSchedules.items.Where(i => i.ReplaceOrder == 0).ToList();
            //var filtered = Operators.HasValue() ? locoSchedules.items.Where(i => i.Operator.EqualsAny(Operators)) : locoSchedules.items;
            Locos.AddRange(items.Cast<Vehicle>());
        }
        var shunters = await DataService.GetShuntingLocosAsync(settings.LayoutId);
        if (shunters.statusCode.IsSuccess())
        {
            var filtered = Operators.HasValue() ? shunters.items.Where(i => i.OperatorName.EqualsAny(Operators)) : shunters.items;
            Locos.AddRange(shunters.items.Cast<Vehicle>());
        }
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        Operators = q["operator"];
    }
}
