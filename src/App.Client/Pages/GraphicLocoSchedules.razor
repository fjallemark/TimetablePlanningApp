@page "/graphiclocoschedules"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService


@if (Items is null)
{
    <CreatingReport />
}
else if (Layout is not null)
{
    <RefreshButton OnClick="OnInitializedAsync" />

    var lastTurnusNumber = "";
    @foreach (var itemsOnPage in SortedItems(Items).ItemsPerPage(14))
    {
        <div class="pagebreak">
            <div style="padding: 3pt; font-size: 16pt"><span style="font-weight: bold; ">@Heading</span> <span style="display: block; font-size: 12pt">@Venue</span></div>
            <div style="margin: 0px; padding: 0px">
                <svg height="@Height" width="@Width">
                    @for (var hour = Layout.StartHour; hour <= Layout.EndHour; hour++)
                    {
                        var x = hour.TimeX(Layout.StartHour, Layout.EndHour);
                        <line x1="@x" y1="12" x2="@x" y2="20" style="stroke:lightgray;stroke-width:1" />
                        <text>
                            <text style="font-weight: bold" x="@x" y="12" fill="black" text-anchor="middle">@hour</text>
                        </text>
                    }
                    <line x1="0" y1="20" x2="@Width" y2="20" style="stroke:lightgray;stroke-width:1" />

                </svg>

                @foreach (var item in itemsOnPage)
                {
                    <GraphicVehicleScheduleItem Item="@item" StartHour="@Layout.StartHour" EndHour="Layout.EndHour" IsNewSection="@IsNewTurnusNumber(lastTurnusNumber, item.Turnus)"></GraphicVehicleScheduleItem>
                    lastTurnusNumber = item.Turnus;
                }
            </div>
            <div style="width: 1100px; text-align:center">@PageNumbering</div>
        </div>
    }
}
@code {
    string? SelectedOperatorNames { get; set; }
    private IEnumerable<LocoSchedule>? Items { get; set; }
    private Layout? Layout;
    int PageNumber;

    protected override async Task OnInitializedAsync()
    {
        PageNumber = 1;
        SetQueryStringParameters();
        var layoutResult = await DataService.GetLayoutAsync();
        if (layoutResult.statusCode.IsSuccess())
        {
            Layout = layoutResult.item;
            var schedulesResult = await DataService.GetLocoSchedulesAsync(Layout!.Id);
            if (schedulesResult.statusCode.IsSuccess())
            {
                var items = schedulesResult.items.Where(i => i.ReplaceOrder == 0);
                Items = SelectedOperatorNames.HasValue() ? items.Where(i => i.OperatorName.EqualsAny(SelectedOperatorNames)) : items;
            }
        }

    }

    IEnumerable<LocoSchedule> SortedItems(IEnumerable<LocoSchedule> items) =>
        items
            .OrderBy(i => i.OperatorName)
            .ThenBy(i => i.TurnusNumber)
            .ThenBy(i => i.OperationDaysFlags);

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperatorNames = q["operator"];
    }

    int NextPage()
    {
        PageNumber++;
        return PageNumber;
    }

    bool IsNewTurnusNumber(string lastTurnusNumber, string currentTurnusNumber) =>
        !string.IsNullOrWhiteSpace(lastTurnusNumber) && lastTurnusNumber != currentTurnusNumber;

    string Heading => PageNumber < 2 ?
        $"{Localizer["LocoSchedules"]}" :
        $"{Localizer["LocoSchedules"]}, {Localizer["Continued"].ToLower()}";
    string Venue => $"{Layout?.Name} {ValidPeriod}";
    string ValidPeriod => $"{Layout?.ValidFrom:d}-{Layout?.ValidTo:d}";
    string PageNumbering => $"{Localizer["Page"]} {PageNumber++}";
    int Height => 20;
    int Width => Items?.Any() == true ? Items.First().Width() + 10 : 0;

}
