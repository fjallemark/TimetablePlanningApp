@layout PrintLayout
@page "/stationdutiesbooklet"
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject PrintedReportsService DataService

@if (!IsLoaded)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />

    @for (var i = 0; i < Pages.Length; i += 2)
    {
        <div class="pagebreak">
            @if (PageLeft(i).IsBlank)
            {
                <BlankDutyPage PageNumber="PageLeft(i).Number"></BlankDutyPage>
            }
            else if (PageLeft(i).IsPart)
            {
                <StationDutyTrainsPage PageNumber=PageLeft(i).Number Calls="@PageLeft(i).Calls" />
            }
            else if (PageLeft(i).IsFront)
            {
                <DutyFrontPage PageNumber="PageLeft(i).Number" Item="PageLeft(i).Duty"></DutyFrontPage>
            }
            else if (PageLeft(i).IsInstructions)
            {
                <DutyInstructionsPage PageNumber="PageLeft(i).Number" MarkdownContent="@PageLeft(i).InstructionsMarkdown" Heading="@PageLeft(i).InstructionsHeading" GeneralNote="@Localizer["StationDutyGeneralNote"]"></DutyInstructionsPage>
            }

            @if (PageRight(i).IsBlank)
            {
                <BlankDutyPage PageNumber="PageRight(i).Number"></BlankDutyPage>
            }
            else if (PageRight(i).IsPart)
            {
                <StationDutyTrainsPage PageNumber=PageRight(i).Number Calls="@PageRight(i).Calls" />
            }
            else if (PageRight(i).IsFront)
            {
                <DutyFrontPage PageNumber="PageRight(i).Number" Item="PageRight(i).Duty"></DutyFrontPage>
            }
            else if (PageRight(i).IsInstructions)
            {
                <DutyInstructionsPage PageNumber="PageRight(i).Number" MarkdownContent="@PageRight(i).InstructionsMarkdown" Heading="@PageRight(i).InstructionsHeading" GeneralNote="@Localizer["StationDutyGeneralNote"]"></DutyInstructionsPage>
            }
        </div>
    }
}


@code {
    private StationDutyPage[] Pages = Array.Empty<StationDutyPage>();
    private int pageNumber;
    private bool IsLoaded;
    string? SelectedStationSignature { get; set; }

    override protected async Task OnInitializedAsync()
    {
        SetQueryStringParameters();
        IsLoaded = false;
        var layoutResult = await DataService.GetLayoutAsync();
        if (layoutResult.statusCode.IsSuccess())
        {
            var result = await DataService.GetStationDutiesAsync(layoutResult.item!.Id);
            if (result.statusCode.IsSuccess() && result.item != null)
            {
                var duties = FilterDuties(result.item.Duties);
                Pages = duties.GetAllStationDutyPagesInBookletOrder(result.item.Instructions).ToArray();
                IsLoaded = true;
            }            
        }
    }

    private ICollection<StationDuty> FilterDuties(ICollection<StationDuty> duties)
    {
        if (SelectedStationSignature.HasValue()) 
            return duties.Where(d => d.Number.Equals(SelectedStationSignature, StringComparison.OrdinalIgnoreCase)).ToArray();
        return duties;
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedStationSignature = q["station"];
    }

    private string PagebreakCss()
    {
        pageNumber++;
        return pageNumber % 2 == 0 ? "pagebreak" : "";
    }

    private StationDutyPage PageLeft(int i) => Pages[i];
    private StationDutyPage PageRight(int i) => Pages[i + 1];
}
