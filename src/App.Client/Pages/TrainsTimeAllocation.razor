@page "/trainstimeallocation"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService
@inject IOptions<AppSettings> Options

<RefreshButton OnClick="OnInitializedAsync" />

<h3>@Localizer["TrainsTimeAllocation"]</h3>
@if (Minutes == 0)
{
    <CreatingReport />
}
else
{
    <div style="display: flex; flex-direction: row; flex-wrap: wrap;  margin-left: 4px">
        @for (var m = 0; m < Minutes; m++)
        {
            <div style="align-self: end; height: @(AllocationTable[m]*10)px; width: 10px; margin: 1px; background-color: @BackgroundColor(m); writing-mode: vertical-rl; text-orientation: mixed; color: white; font-size: 8pt; font-weight: bold">
                @Time(m)  @AllocationTable[m]
            </div>
        }
    </div>
}

@code {
    Layout? Layout;
    byte[] AllocationTable = Array.Empty<byte>();
    byte MaxTrainCount;
    int Minutes;
    string? SelectedOperatorSignature;

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperatorSignature = q["operator"];
    }

    string Time(int index) => $"{Layout!.StartHour + index / 60:00}:{index % 60:00}";

    string BackgroundColor(int index) =>
        index % 60 == 0 ? "black" :
        Layout is  null ? "white" :
        AllocationTable[index] > Layout.MaxLocoDriversCount ? "red" :
        AllocationTable[index] == Layout.MaxLocoDriversCount ? "green" :
        AllocationTable[index] == Layout.MaxLocoDriversCount - 1 ? "orange" :
        "gray";

    protected override async Task OnInitializedAsync()
    {
        SetQueryStringParameters();
        Minutes = 0;
        var result1 = await DataService.GetLayoutAsync();
        if (result1.statusCode.IsSuccess())
        {
            Layout = result1.item;
            var result2 = await DataService.GetTrainsAsync(Layout!.Id, SelectedOperatorSignature);
            if (result2.statusCode.IsSuccess())
            {
                AllocationTable = BuildTrainAllocationTable(Layout, result2.items);
                MaxTrainCount = AllocationTable.Max();
                Minutes = AllocationTable.Length;
            }
        }
    }

    // TODO: Take operation days into account!
    byte[] BuildTrainAllocationTable(Layout? layout, IEnumerable<Train> trains)
    {
        if (layout is null) return Array.Empty<byte>();
        var startTime = trains.Min(t => t.Calls[0].Arrival.AsTimeSpan());
        var endTime = trains.Max(t => t.Calls[^1].Departure.AsTimeSpan());
        var minutes = (int)(endTime - startTime).TotalMinutes;
        var table = new byte[minutes+1];
        foreach (var train in trains)
        {
            var calls = train.Calls.OrderBy(c => c.SortTime());
            var startIndex = calls.First().Arrival.OffsetIndex(startTime);
            var endIndex = calls.Last().Departure.OffsetIndex(startTime);
            for (var i = startIndex; i < endIndex; i++)
            {
                table[i]++;
            }
            if (endIndex == minutes) table[minutes]++;
        }
        return table;
    }
}
