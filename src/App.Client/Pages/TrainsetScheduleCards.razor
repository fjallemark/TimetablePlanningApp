@page "/trainsetschedules"
@layout PrintLayout
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService

@if (Items == null)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />

    @foreach (var itemsOnPage in Items.ItemsPerPage(10))
    {
        <div class="pagebreak">
            @foreach (var item in itemsOnPage)
            {
                <VehicleScheduleCard Item="@item"></VehicleScheduleCard>
            }
        </div>
    }
}

@code {
    string? SelectedOperatorNames { get; set; }
    private IEnumerable<TrainsetSchedule>? Items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var layoutResult = await DataService.GetLayoutAsync();
        if (layoutResult.statusCode.IsSuccess())
        {
            var result = await DataService.GetTrainsetSchedulesAsync(layoutResult.item!.Id);
            if (result.statusCode.IsSuccess())
            {
                SetQueryStringParameters();
                Items = result.items.Where(i => string.IsNullOrWhiteSpace(SelectedOperatorNames) || i.OperatorName.EqualsAny(SelectedOperatorNames));
            }            
        }
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperatorNames = q["operator"];
    }
}
