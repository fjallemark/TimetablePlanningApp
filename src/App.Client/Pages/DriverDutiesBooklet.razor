@layout PrintLayout
@page "/driverdutiesbooklet"
@using System.Diagnostics;
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService


@if (!IsLoaded)
{
    <CreatingReport />
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />
    <RefreshButton OnClick="Renumber" Label="Renumber"/>

    @for (var p = 0; p < Pages.Length; p += 2)
    {
        var pageLeft = Pages[p];
        var pageRight = Pages[p + 1];

        <div class="pagebreak">
            @if (pageLeft.IsBlank)
            {
                <BlankDutyPage PageNumber="pageLeft.Number"></BlankDutyPage>
            }
            else if (pageLeft.IsFront)
            {
                <DutyFrontPage PageNumber="pageLeft.Number" Item="pageLeft.Duty" HasInstructions="Pages.Any(p => p.IsInstructions)"></DutyFrontPage>
            }
            else if (pageLeft.IsPart)
            {
                <DutyPartPage PageNumber="pageLeft.Number" DriverDutyParts="pageLeft.DutyParts" Duty="pageLeft.Duty"></DutyPartPage>
            }
            else if (pageLeft.IsInstructions)
            {
                <DutyInstructionsPage Heading="@(pageLeft.InstructionsHeading)" Duty="pageLeft.Duty" PageNumber="pageLeft.Number" MarkdownContent="@(pageLeft.InstructionsMarkdown)"></DutyInstructionsPage>
            }
            @if (pageRight.IsBlank)
            {
                <BlankDutyPage PageNumber="pageRight.Number"></BlankDutyPage>
            }
            else if (pageRight.IsFront)
            {
                <DutyFrontPage PageNumber="pageRight.Number" Item="pageRight.Duty" HasInstructions="Pages.Any(p => p.IsInstructions)"></DutyFrontPage>
            }
            else if (pageRight.IsPart)
            {
                <DutyPartPage PageNumber="pageRight.Number" DriverDutyParts="pageRight.DutyParts" Duty="pageRight.Duty"></DutyPartPage>               
            }
            else if (pageLeft.IsInstructions)
            {
                <DutyInstructionsPage Heading="@(pageRight.InstructionsHeading)" Duty="pageRight.Duty" PageNumber="pageRight.Number" MarkdownContent="@(pageRight.InstructionsMarkdown)"></DutyInstructionsPage>
            }

        </div>
    }
}


@code
{
    private DriverDutyPage[] Pages = Array.Empty<DriverDutyPage>();
    private int pageNumber;
    private bool IsLoaded;
    string? SelectedOperatorName;
    string? SelectedDutyNumber;
    Layout? Layout;

    override protected async Task OnInitializedAsync()
    {
        IsLoaded = false;
        var layoutResult = await DataService.GetLayoutAsync();
        if (layoutResult.statusCode.IsSuccess())
        {
            Layout = layoutResult.item;
            SetQueryStringParameters();
            var result = await DataService.GetDriverDutiesAsync(Layout!.Id);
            if (result.statusCode.IsSuccess() && result.item != null)
            {
                var duties = FilterDuties(result.item.Duties);
                Pages = duties.GetAllDriverDutyPagesInBookletOrder(result.item.Instructions).ToArray();
                IsLoaded = true;
            }        
        }

    }

    private ICollection<DriverDuty> FilterDuties(ICollection<DriverDuty> duties)
    {
        if (SelectedDutyNumber.HasValue()) return duties.Where(d => d.Number.EqualsAny(SelectedDutyNumber)).ToArray();
        if (SelectedOperatorName.HasValue()) return duties.Where(d => d.Operator.EqualsAny(SelectedOperatorName)).ToArray();
        return duties;
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperatorName = q["operator"];
        SelectedDutyNumber = q["duty"];
    }

    private string PagebreakCss()
    {
        pageNumber++;
        return pageNumber % 2 == 0 ? "pagebreak" : "";
    }

    private async Task Renumber()
    {
        if (Layout is null) return;
        await DataService.RenumberDuties(Layout!.Id);
        await OnInitializedAsync();
    }
}
