@layout PrintLayout
@page "/driverdutiesbooklet"
@using System.Diagnostics;
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService
@inject IOptions<AppSettings> Options


@if (!IsLoaded)
{
    <div class="print creatingreport">@Localizer["CreatingReport"]</div>
}
else
{
    <RefreshButton OnClick="OnInitializedAsync" />

    @for (var i = 0; i < Pages.Length; i += 2)
    {
        <div class="pagebreak">
            @if (PageLeft(i).IsBlank)
            {
                <BlankDutyPage PageNumber="PageLeft(i).Number"></BlankDutyPage>
            }
            else if (PageLeft(i).IsFront)
            {
                <DutyFrontPage PageNumber="PageLeft(i).Number" Item="PageLeft(i).Duty"></DutyFrontPage>
            }
            else if (PageLeft(i).IsPart)
            {
                <DutyPartPage PageNumber="PageLeft(i).Number" Item="PageLeft(i).DutyPart" Duty="PageLeft(i).Duty"></DutyPartPage>
            }
            else if (PageLeft(i).IsInstructions)
            {
                <DutyInstructionsPage Heading="@PageLeft(i).InstructionsHeading" Duty="PageLeft(i).Duty" PageNumber="PageLeft(i).Number" MarkdownContent="@PageLeft(i).InstructionsMarkdown"></DutyInstructionsPage>
            }

            @if (PageRight(i).IsBlank)
            {
                <BlankDutyPage PageNumber="PageRight(i).Number"></BlankDutyPage>
            }
            else if (PageRight(i).IsFront)
            {
                <DutyFrontPage PageNumber="PageRight(i).Number" Item="PageRight(i).Duty"></DutyFrontPage>
            }
            else if (PageRight(i).IsPart)
            {
                <DutyPartPage PageNumber="PageRight(i).Number" Item="PageRight(i).DutyPart" Duty="PageRight(i).Duty"></DutyPartPage>
            }
            else if (PageRight(i).IsInstructions)
            {
                <DutyInstructionsPage Heading="@PageRight(i).InstructionsHeading" Duty="PageRight(i).Duty" PageNumber="PageRight(i).Number" MarkdownContent="@PageRight(i).InstructionsMarkdown"></DutyInstructionsPage>
            }
        </div>
    }
}


@code
{
    private DriverDutyPage[] Pages = Array.Empty<DriverDutyPage>();
    private int pageNumber;
    private bool IsLoaded;
    string? SelectedOperator;
    string? SelectedDutyNumber;

    override protected async Task OnInitializedAsync()
    {
        var settings = Options.Value;
        SetQueryStringParameters();
        IsLoaded = false;
        var result = await DataService.GetDriverDutiesAsync(settings.LayoutId);
        if (result.statusCode.IsSuccess() && result.item != null)
        {
            var duties = FilterDuties(result.item.Duties);
            Pages = duties.GetAllDriverDutyPagesInBookletOrder(result.item.Instructions).ToArray();
            IsLoaded = true;
        }
    }

    private ICollection<DriverDuty> FilterDuties(ICollection<DriverDuty> duties)
    {
        if (SelectedDutyNumber.HasValue()) return duties.Where(d => d.Number.EqualsAny(SelectedDutyNumber)).ToArray();
        if (SelectedOperator.HasValue()) return duties.Where(d => d.Operator.EqualsAny(SelectedOperator)).ToArray();
        return duties;
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperator = q["operator"];
        SelectedDutyNumber = q["duty"];
    }

    private string PagebreakCss()
    {
        pageNumber++;
        return pageNumber % 2 == 0 ? "pagebreak" : "";
    }

    private DriverDutyPage PageLeft(int i) => Pages[i];
    private DriverDutyPage PageRight(int i) => Pages[i + 1];
}
