@using Tellurian.Trains.Planning.App.Client.Components
@layout PrintLayout
@page "/driverdutiesbooklet"
@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject Services.PrintedReportsService DataService

@if (!IsLoaded)
{
    <div class="print creatingreport">@Localizer["CreatingReport"]</div>
}
else
{
    @for (var i = 0; i < Pages.Length; i += 2)
    {
        <div class="pagebreak">
            @if (PageLeft(i).IsBlank)
            {
                <BlankDutyPage PageNumber="PageLeft(i).Number"></BlankDutyPage>
            }
            else if (PageLeft(i).IsFront)
            {
                <DutyFrontPage PageNumber="PageLeft(i).Number" Item="PageLeft(i).Duty"></DutyFrontPage>
            }
            else if (PageLeft(i).IsPart)
            {
                <DutyPartPage PageNumber="PageLeft(i).Number" Item="PageLeft(i).DutyPart" Duty="PageLeft(i).Duty"></DutyPartPage>
            }
            else if (PageLeft(i).IsInstructions)
            {
                <DutyInstructionsPage PageNumber="PageLeft(i).Number" MarkdownContent="@PageLeft(i).InstructionsMarkdown"></DutyInstructionsPage>
            }

            @if (PageRight(i).IsBlank)
            {
                <BlankDutyPage PageNumber="PageRight(i).Number"></BlankDutyPage>
            }
            else if (PageRight(i).IsFront)
            {
                <DutyFrontPage PageNumber="PageRight(i).Number" Item="PageRight(i).Duty"></DutyFrontPage>
            }
            else if (PageRight(i).IsPart)
            {
                <DutyPartPage PageNumber="PageRight(i).Number" Item="PageRight(i).DutyPart" Duty="PageRight(i).Duty"></DutyPartPage>
            }
        </div>
    }
}


@code
{
    private DutyPage[] Pages = Array.Empty<DutyPage>();
    private int pageNumber;
    private bool IsLoaded;
    string? SelectedOperator { get; set; }
    int SelectedDutyNumber;

    override protected async Task OnInitializedAsync()
    {
        SetQueryStringParameters();
        IsLoaded = false;
        var result = await DataService.GetDriverDutiesAsync(Constants.LayoutId);
        if (result.statusCode.IsSuccess() && result.item != null)
        {
            var duties = FilterDuties(result.item.Duties);
            Pages = duties.GetAllDriverDutyPagesInBookletOrder(result.item.Instructions).ToArray();
            IsLoaded = true;
        }
    }

    private ICollection<DriverDuty> FilterDuties(ICollection<DriverDuty> duties)
    {
        if (SelectedDutyNumber > 0) return duties.Where(d => d.Number == SelectedDutyNumber).ToArray();
        if (SelectedOperator is not null) return duties.Where(d => d.Operator.Equals(SelectedOperator, StringComparison.OrdinalIgnoreCase)).ToArray();
        return duties;
    }

    void SetQueryStringParameters()
    {
        var q = Navigator.QueryString();
        SelectedOperator = q["operator"];
        int.TryParse(q["duty"], NumberStyles.Integer, CultureInfo.InvariantCulture, out SelectedDutyNumber);
    }

    private string PagebreakCss()
    {
        pageNumber++;
        return pageNumber % 2 == 0 ? "pagebreak" : "";
    }

    private DutyPage PageLeft(int i) => Pages[i];
    private DutyPage PageRight(int i) => Pages[i + 1];
}
