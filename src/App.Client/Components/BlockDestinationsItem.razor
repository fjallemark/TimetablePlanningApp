@using Tellurian.Trains.Planning.App.Client.Extensions
@inject IStringLocalizer<App> Localizer

@if (BlockDestinations == null)
{
    <p>Wait...</p>
}
else
{
    <div class="pagebreak-hard">
        <h2>@BlockDestinations.OriginStationName</h2>
        <p>
            @Localizer["BlockDestinations"]:
            @if (BlockDestinations.BlockIsMaxInTrain)
            {
                @Localizer["NumberOfWagonsPerBlockIndicatesMaxInTrain"]
            }
            else
            {
                @Localizer["NumberOfWagonsPerBlockIndicatesMaxToBeSentFromThisStation"]
            }
        </p>
        <br />
        <div>
            @foreach (var track in BlockDestinations.Tracks.OrderBy(t => t.TrackDisplayOrder))
            {
                <div class="track">
                    <div class="track number">@Localizer["Track"] @track.TrackNumber</div>
                    <div style="display: flex; flex-direction: column">
                        @foreach (var trainBlocking in track.TrainBlocks.OrderBy(tb => tb.DepartureTime.SortTime()))
                        {
                            <div style="display: flex; flex-direction: @trainBlocking.FlexDirection(ReverseBlockDestinations); justify-content:flex-start">
                                <div class="track train">@trainBlocking.Train.Display() @trainBlocking.ArrivalTime.Time -  @trainBlocking.DepartureTime.Time</div>

                                @if (trainBlocking.IsScheduled)
                                {
                                    @foreach (var blockDestination in trainBlocking.BlockDestinations.OrderBy(bd => bd.OrderInTrain))
                                    {
                                        <div class="track destination">
                                            <div class="block destination" style="color : #000000; background-color: #FAFAFA">
                                                @((MarkupString)blockDestination.ToString())
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    @foreach (var destinationGroup in trainBlocking.BlockDestinations.GroupBy(bd => bd.OrderInTrain))
                                    {
                                        <div class="track destination">
                                            @foreach (var destination in destinationGroup.OrderBy(dg => dg.TransferDestinationName).ThenBy(dg => dg.StationName))
                                            {
                                                @if (destination.IsRegion)
                                                {
                                                    @((MarkupString)destination.ToString())
                                                }
                                                else if (destination.IsTrainset)
                                                {
                                                    <div class="block destination" style="color : #000000; background-color: #FAFAFA">
                                                        @((MarkupString)destination.ToString())
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="block destination" style="color : #FFFFFF; background-color: #777777">
                                                        @((MarkupString)destination.ToString())
                                                    </div>
                                                }
                                            }
                                            @NumberOfWagons(destinationGroup)
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public BlockDestinations? BlockDestinations { get; set; }
    [Parameter] public bool ReverseBlockDestinations { get; set; }

    string NumberOfWagons(IEnumerable<BlockDestination> destinations)
    {
        var count = destinations.Sum(d => d.MaxNumberOfWagons);
        return count == 0 ? string.Empty : $"×{count}";

    }
}
