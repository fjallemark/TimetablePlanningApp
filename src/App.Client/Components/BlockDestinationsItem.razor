@inject IStringLocalizer<App> Localizer

@if (BlockDestinations == null)
{
    <p>Wait...</p>
}
else
{
    <div class="pagebreak-hard">
        <h3>@Localizer["BlockDestinations"] @BlockDestinations.OriginStationName</h3>
        <p>@Localizer["NumberOfWagonsPerBlockIndicatesMaxToBeSentFromThisStation"]</p>
        <br />
        <div>
            @foreach (var track in BlockDestinations.Tracks)
            {
                <div class="blocking track">
                    <div class="blocking track number">@Localizer["Track"] @track.TrackNumber</div>
                    <div style="display: flex; flex-direction: column">
                        @foreach (var train in track.TrainBlocks)
                        {
                            <div style="display: flex; flex-direction: @train.FlexDirection(); justify-content:flex-start">
                                <div class="blocking track train">@train.Train.Display() @train.DepartureTime.Time</div>
                                @foreach (var destinationGroup in train.BlockDestinations.GroupBy(bd => bd.OrderInTrain))
                                {
                                    <div class="blocking track destination">
                                        @foreach (var destination in destinationGroup.OrderBy(dg => dg.MaxNumberOfWagons))
                                        {
                                            @if (destination.IsRegion)
                                            {
                                                <div class="destination item" style="color : @destination.ForeColor; background-color: @destination.BackColor">
                                                    @destination.ToString()
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="destination item" style="color : #FFFFFF; background-color: #777777">
                                                    @destination.ToString()
                                                </div>
                                            }
                                        }
                                        @NumberOfWagons(destinationGroup)
                                    </div>
                                }

                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public BlockDestinations? BlockDestinations { get; set; }

    string NumberOfWagons(IEnumerable<BlockDestination> destinations)
    {
        var count = destinations.Sum(d => d.MaxNumberOfWagons);
        return count == 0 ? string.Empty : $"×{count}";

    }
}